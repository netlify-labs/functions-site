[
  {
    "name": "create-react-app-lambda",
    "description": "Create React App with baked in Netlify functions support",
    "code": "https://github.com/netlify/create-react-app-lambda",
    "tags": [
      "react",
      "starter"
    ]
  },
  {
    "name": "serverless-auth-strategies",
    "description": "How to protected & scoped down functions to specific users",
    "code": "https://github.com/DavidWells/serverless-auth-strategies",
    "tags": [
      "auth"
    ]
  },
  {
    "name": "verify-okta",
    "description": "Verify an Okta token with Go",
    "code": "https://github.com/netlify/verify-okta",
    "tags": [
      "auth"
    ]
  },
  {
    "name": "form-to-function-to-sanity.io",
    "description": "This is a simple example of how you can use Forms and Functions in Netlify to submit data to your Sanity.io project.",
    "url": "https://github.com/kmelve/netlify-form-sanity",
    "code": "https://github.com/kmelve/netlify-form-sanity/blob/master/functions/submission-created.js",
    "tags": [
      "forms",
      "sanity.io"
    ]
  },
  {
    "name": "send-email-via-aws-sns",
    "description": "Sends a question submitted from HTML question form via AWS SES. This example connects to an external AWS account",
    "code": "https://github.com/frzng/jamstack-experiments/blob/08f8a7edc014e076334a4d72e29e34ccdedcb8b1/_hooks/send-question.js",
    "tags": [
      "email",
      "aws"
    ]
  },
  {
    "name": "stripe-payment-processing",
    "description": "stripe payment processing ",
    "code": "https://github.com/alexmacarthur/netlify-lambda-function-example/blob/68a0cdc05e201d68fe80b0926b0af7ff88f15802/lambda-src/purchase.js#L43",
    "tags": [
      "payment",
      "ecommerce"
    ]
  },
  {
    "name": "form-spam-filter",
    "description": "Filter form spam and send to Zapier webhook",
    "code": "https://github.com/chrisjm/chrisjmears.com/blob/0361a03991b6a9ddd27d0514bc714b29a37908e2/js/spam-filter.js",
    "tags": [
      "zapier",
      "spam"
    ]
  },
  {
    "name": "send-email-via-nodemailer",
    "description": "send email via nodemailer",
    "code": "https://github.com/kicholen/makeithappen/blob/79b9c8f3a7238dc75308f9a69d769d7cda7dd522/func/sendMail.js",
    "tags": [
      "email"
    ]
  },
  {
    "name": "send-email-via-sendgrid",
    "description": "send email via sendgrid",
    "code": "https://github.com/francoislesenne/Blog-joellesenne/blob/721bccce911530628d1097a192a5b9828b0032ea/src/sendgrid/app.js",
    "tags": [
      "email"
    ]
  },
  {
    "name": "netlify-headless-site",
    "description": "Serve entire site via Netlify functions + dynamic serverside HTML rendering",
    "code": "https://github.com/rabbah/www/tree/56a7ce1a24df26db571719c6805242b1ff121617/src",
    "tags": [
      "ssr"
    ]
  },
  {
    "name": "fetch-files-from-google-drive",
    "description": "List files from google drive API",
    "code": "https://github.com/JustinBeckwith/fileLister/blob/91b7af9fad934b519343d856753469744289bfbb/src/files.js",
    "tags": [
      "file-storage"
    ]
  },
  {
    "name": "ping-superfeedr-on-deploy",
    "description": "Ping Superfeedr RSS, Atom, or JSON feeds on successful deploy. Uses event driven functions",
    "code": "https://github.com/anarchivist/matienzo.org/blob/80d1a840fffa6ed9f1bd940ee4635aa4da39cd14/_functions/deploy-succeeded.js"
  },
  {
    "name": "save-data-to-google-sheets",
    "description": "Save emails to googlesheets ",
    "code": [
      "https://github.com/grod220/CCS-B.B.Warfield/blob/master/lambda/googleSheets.js",
      "https://github.com/netlify/swag-site/blob/master/lambda/stash-in-sheets.js"
    ]
  },
  {
    "name": "progressive-form-enhancement-via-functions",
    "description": "Handle Ajax & normal form POST submissions via functions",
    "code": "https://github.com/DavidWells/progressive-enhancement-form-functions/blob/master/functions/form-handler.js",
    "url": "https://progressive-enhancement-form.netlify.com/",
    "tags": [
      "forms"
    ]
  },
  {
    "name": "process-upload-send-to-trello-slack-mailgun",
    "description": "Process form file upload and send to results to trello, slack, & mailgun",
    "code": "https://github.com/NimbusForWork/nimbusforwork.com/blob/6641ee3d5a1faad3deb6bc5734ae05b521bb9b3b/src/lambda/form.js",
    "tags": [
      "email",
      "file-processing"
    ]
  },
  {
    "name": "mailchimp-landing-page",
    "description": "Landing page with mailchimp",
    "code": "https://github.com/tobilg/netlify-functions-landingpage/blob/169de175d04b165b5d4801b09cb250cd9a740da5/src/lambda/signup.js",
    "tags": [
      "email",
      "marketing"
    ]
  },
  {
    "name": "ifttt-to-flick-instagram-make-new-github-post",
    "description": "Webhook from IFTTT when new Flickr photo with tag #blog create github file and post. Automated photo blog",
    "code": [
      "https://github.com/rretsiem/renem.net/blob/574b1c5091e993b520e23f993a6c46069e92cdb0/src/functions/flickr-webhook.js",
      "https://github.com/rretsiem/renem.net/blob/574b1c5091e993b520e23f993a6c46069e92cdb0/src/functions/instagram-webhook.js"
    ],
    "url": "https://renem.net/photos/",
    "tags": [
      "instagram",
      "github"
    ]
  },
  {
    "name": "bus-schedule-tracker",
    "description": "Tracking bus schedules ",
    "code": "https://github.com/edumentab/my-next-bus/blob/master/src/functions/departures.js"
  },
  {
    "name": "proxy-blocked-google-analytics",
    "description": "Proxy pageviews to google analytics incase google analytics is blocked on the client side",
    "code": "https://github.com/codeniko/simple-tracker/blob/master/examples/server-examples/aws-lambda/google-analytics.js",
    "tags": [
      "proxy",
      "marketing"
    ]
  },
  {
    "name": "proxy-tracking-data-to-loggly",
    "description": "proxy arbitrary tracking data to a log management service Loggly ",
    "code": "https://github.com/codeniko/simple-tracker/blob/master/examples/server-examples/aws-lambda/track.js",
    "tags": [
      "proxy",
      "marketing"
    ]
  },
  {
    "name": "lookup-dns",
    "description": "DNS lookup of a site",
    "code": "https://github.com/HJGreen/who-owns/blob/master/lambda-src/dns.js",
    "tags": [
      "dns"
    ]
  },
  {
    "name": "get-items-from-cosmicjs",
    "description": "List out objects from cosmicjs ",
    "code": "https://github.com/aslanvaroqua/netlambda/blob/master/netlify-lambda/objects.js"
  },
  {
    "name": "serverside-hashing",
    "description": "Serverside hashing via crypto",
    "code": "https://github.com/SquishyCat/netlify_lambda/blob/master/netlify-lambda/hash.js",
    "tags": [
      "crypto"
    ]
  },
  {
    "name": "get-weather-via-openweathermap",
    "description": "Get the weather via openweathermap ",
    "code": "https://github.com/mattburrell/wishyouwerehere/blob/master/src/lambda/weatherHandler.js",
    "tags": [
      "weather"
    ]
  },
  {
    "name": "send-custom-netlify-build-slack-notification",
    "description": "Custom netlify build status in slack ",
    "code": "https://github.com/mirshko/netlify-status-topic",
    "tags": [
      "build"
    ]
  },
  {
    "name": "contentful-authless-comments",
    "description": "Contentful authless comments ",
    "code": "https://github.com/shaunpersad/authless-comments-example",
    "tags": [
      "contentful",
      "comments"
    ]
  },
  {
    "name": "token-hider-via-proxy",
    "description": "Token hider api passthrough proxy",
    "code": "https://github.com/depadiernos/token-hider"
  },
  {
    "name": "tokbox-session-manager",
    "description": "Build live interactive video, voice and messaging into your web and mobile apps via tokbox",
    "code": "https://github.com/slap-dash/slap-dash/tree/master/src/lambda"
  },
  {
    "name": "url-shortening-service",
    "description": "URL shortening service ",
    "code": "https://github.com/philhawksworth/linkylinky/tree/master/src/lambda",
    "tags": [
      "marketing"
    ]
  },
  {
    "name": "contentful-image-saver",
    "description": "Save images to contentful",
    "code": "https://github.com/mirshko/contentful-lambda/blob/master/src/lambda/createImageEntry.js",
    "tags": [
      "file-storage",
      "contentful"
    ]
  },
  {
    "name": "save-twitch-clips-save-to-postgres",
    "description": "Grab clips from twitch and insert into postgres database",
    "code": [
      "https://github.com/stphnchoe/twitchClips/blob/master/src/lambda/handler.js",
      "https://github.com/stphnchoe/twitchClips/blob/master/database/index.js"
    ],
    "tags": [
      "database",
      "postgres",
      "twitch"
    ]
  },
  {
    "name": "swambda-openapi",
    "description": "Integrate OpenAPI (swagger) specifications and lambda into an easy-to-use routing tier ",
    "code": "https://github.com/fehguy/swambda"
  },
  {
    "name": "detect-csp-violations",
    "description": "CSP violations reporting by setting the lambda URL as the CSP report-uri",
    "code": [
      "https://github.com/stefanjudis/stefan-judis-website/blob/020f1b005cb1fcf4da8afa4407d9514917aecda0/functions/report.js",
      "https://github.com/stefanjudis/stefan-judis-website/blob/020f1b005cb1fcf4da8afa4407d9514917aecda0/static/_headers#L2"
    ],
    "tags": [
      "security",
      "CSP"
    ]
  },
  {
    "name": "scrape-twitter-avatars",
    "description": "Scrape mobile twitter HTML to return the URLs of a user avatar",
    "url": "https://twavatar.netlify.com/",
    "code": "https://github.com/philhawksworth/twavatar",
    "tags": [
      "twitter"
    ]
  },
  {
    "name": "intercom-as-oauth-login",
    "description": "Oauth via intercom ",
    "code": "https://github.com/DavidWells/intercom-netlify-oauth",
    "tags": [
      "auth",
      "oauth",
      "intercom"
    ]
  },
  {
    "name": "netlify-functions-crud-app-with-fauna",
    "description": "Using faunaDB as datastore ",
    "code": "https://github.com/netlify/netlify-faunadb-example",
    "tags": [
      "database",
      "fauna",
      "crud"
    ]
  },
  {
    "name": "netlify-functions-express",
    "description": "Using express with netlify functions",
    "code": "https://github.com/DavidWells/netlify-functions-express",
    "tags": [
      "express",
      "ssr"
    ]
  },
  {
    "name": "netlify-functions-gated-sites",
    "description": "Gating multiple sites with Okta ",
    "code": "https://github.com/DavidWells/netlify-gated-sites/tree/master/okta",
    "tags": [
      "auth",
      "okta"
    ]
  },
  {
    "name": "post-a-tweet",
    "description": "Post a tweet to Twitter",
    "code": "https://github.com/colbyfayock/tweet/blob/0d22f08292bb077f2248329abe9bf37ef7d8bf89/src/tweet.js",
    "tags": [
      "twitter"
    ]
  },
  {
    "name": "netlify-functions-as-zips",
    "description": "Functions as zips ",
    "code": "https://github.com/DavidWells/function-zips",
    "tags": [
      "packaging"
    ]
  },
  {
    "name": "netlify-identity-whitelist-emails",
    "description": "Validate emails on Netlify identity signup",
    "code": "https://github.com/escaladesports/react-netlify-form/blob/7d28c95b709055a6fd4e4039248eff1a34af2fc0/src/functions/identity-signup.js",
    "tags": [
      "auth",
      "identity"
    ]
  },
  {
    "name": "netlify-functions-apollo-graphql",
    "description": "Deploying Apollo graphql on netlify functions ",
    "code": "https://github.com/stubailo/apollo-netlify-lambda-app",
    "url": "https://blog.apollographql.com/deploy-a-fullstack-apollo-app-with-netlify-45a7dfd51b0b",
    "tags": [
      "graphql"
    ]
  },
  {
    "name": "mongodb-and-functions",
    "description": "Using mongoDB + functions ",
    "url": "https://blog.elpassion.com/jam-stack-your-old-cms-into-the-closet-12cad2c7b1b3",
    "code": "https://github.com/maciejmatu/smoothielicious/tree/b7a5a76eb29af076ed228c9b5d190fb56d0df1d2/src/lambda",
    "tags": [
      "database",
      "mongo"
    ]
  },
  {
    "name": "gatsby-and-netlify-functions",
    "description": "Handling Static Forms, Auth & Serverless Functions with Gatsby on Netlify",
    "url": "https://gatsby-netlify-snipcart.netlify.com/",
    "code": "https://github.com/snipcart/gatsby-netlify",
    "tags": [
      "ecommerce",
      "gatsby",
      "auth"
    ]
  },
  {
    "name": "gatsby-stripe-store-starter",
    "description": "Gatsby & Netlify functions stripe store",
    "code": "https://github.com/raae/gatsby-stripe-store-starter/blob/07f993dc551f9a93ceac3b07e657a50dbebb9254/src/lambda/createAndPayStripeOrder.js",
    "tags": [
      "ecommerce",
      "gatsby",
      "stripe"
    ]
  },
  {
    "name": "Netlibox",
    "description": "Netlify + Dropbox using functions + redirects to validate the webhook",
    "code": "https://github.com/jimniels/netlibox"
  },
  {
    "name": "Shopify ecommerce",
    "description": "Netlify functions + shopify for an ecommerce store",
    "repo": "https://github.com/NEsfandiari/lipslut2.0",
    "code": "https://github.com/NEsfandiari/lipslut2.0/blob/caaf5aac513e81216b82b2fe610d3da868995c4c/lambda-src/createCheckout.js",
    "tags": [
      "ecommerce",
      "shopify"
    ]
  },
  {
    "name": "primsa-graphql-example",
    "description": "Netlify functions + primsa + graphql",
    "code": "https://github.com/auchau/crowdroar_netlify/blob/154a5e7a8f07669da6cdcf932eebdc123a3b38d8/src/lambda/graphql.js",
    "tags": [
      "graphql"
    ]
  },
  {
    "name": "Chuck Norris quote generator",
    "description": "Fetch Chuck Norris quotes",
    "code": "https://github.com/auchau/crowdroar_netlify/blob/154a5e7a8f07669da6cdcf932eebdc123a3b38d8/src/lambda/async-chuck-norris.js",
    "tags": [
      "lol"
    ]
  },
  {
    "name": "Mailchimp signup flow",
    "description": "Netlify functions + subscribe users to mailchimp",
    "repo": "https://github.com/smkkstudios/pairity/",
    "code": "https://github.com/smkkstudios/pairity/blob/b366ec13c54f4782e16f79c18d1795e10c574102/functions/signUp.js",
    "tags": [
      "email",
      "marketing"
    ]
  },
  {
    "name": "Check weather forcast",
    "description": "Check the weather forcast with bugsnag for debugging",
    "code": "https://github.com/mikesprague/localweather-io/blob/f1ae3d72900cd514ac27c65ab6dec70aafdb9362/src/functions/weather.js"
  },
  {
    "name": "Netlify form notifications to slack",
    "description": "Ping slack on new netlify comments",
    "code": "https://github.com/vectronic/website/blob/2f248da49b63d81b142f229acabaa14291bb2fba/src/functions/comment-submitted.js",
    "tags": [
      "slack"
    ]
  },
  {
    "name": "Airtable as database",
    "description": "Using Airtable as a database",
    "code": "https://github.com/adenin-sites/NowAssistant.com/blob/b3f79c441a781a082c06e7ce27678e99fd8b1258/lambda-src/job-application.js",
    "tags": [
      "database",
      "airtable"
    ]
  },
  {
    "name": "pusher-auth",
    "description": "Authenication for pusher pub/sub",
    "code": "https://github.com/NathanHeffley/pointer/blob/f12442f416ae9aa3929482142650b358bf50c1ca/src/functions/auth.js"
  },
  {
    "name": "using-s3-as-a-database",
    "description": "Example of using AWS s3 as a datastore",
    "code": "https://github.com/walbuc/compound/blob/41e6a60fa697d41b5965665c181827a01828925d/functions/test.js",
    "tags": [
      "database",
      "aws",
      "s3"
    ]
  },
  {
    "name": "get-random-emoji",
    "description": "Return a random emoji",
    "code": "https://github.com/mrozilla/mrozilla.cz/blob/fddf0687b30c1615fccdd085fc7acca0948d8a15/src/lambda/emoji.js"
  },
  {
    "name": "lambda-jwt-auth",
    "description": "An auth service powered by lambda functions & MongoDB",
    "repo": "https://github.com/mrozilla/lambda-jwt-auth-demo",
    "code": "https://github.com/mrozilla/lambda-jwt-auth-demo/tree/master/src/lambda",
    "tags": [
      "database",
      "mongo",
      "auth",
      "jwt"
    ]
  },
  {
    "name": "Meetup Raffle",
    "description": "Draw raffle winners at your Meetup event via meetup.com API",
    "repo": "https://github.com/wKovacs64/meetup-raffle",
    "code": "https://github.com/wKovacs64/meetup-raffle/blob/bb32bc10d9bb355e252602873167339073a3f2fa/src/functions/draw.js",
    "tags": [
      "meetup"
    ]
  },
  {
    "name": "Verify phone numbers",
    "description": "Verify phone numbers with Authy SMS",
    "code": "https://github.com/p8952/SafetyCall/blob/1da9967d4c7fb8112fca67b91f69cac8747a265f/src/functions/verifyNumber.js",
    "tags": [
      "auth",
      "sms"
    ]
  },
  {
    "name": "BART Station Departures",
    "description": "Get the SF BART Station Departures",
    "repo": "https://github.com/philipbordallo/stand-clear/",
    "code": "https://github.com/philipbordallo/stand-clear/blob/912c8a454aff7373e1404a871185e2485957494f/src/server/functions/departures.js"
  },
  {
    "name": "MyAnimeList search API",
    "description": "Search MyAnimeList API",
    "code": "https://github.com/destruc7i0n/nani/tree/5063b1abb087f719fc96eeffcb904b631624dc63/src/lambda"
  },
  {
    "name": "Fetch Rasperry pi URL",
    "description": "Fetch Rasperry pi URL from dataplicity",
    "code": "https://github.com/ZachGawlik/zachgawlik.com/blob/6ae0b7485b8aeba9f440b752d35ca4207153dca1/lambdas/get-pi-url.js"
  },
  {
    "name": "Contact form with Airtable & Mailgun",
    "description": "Process contact form submission and store in airtable",
    "code": "https://github.com/stefanjudis/service-party/blob/e744e42b26e48a43f95a5491515a133791dab6fb/src/lambda/contact.js",
    "tags": [
      "email",
      "mailgun",
      "airtable",
      "database"
    ]
  },
  {
    "name": "GitHub Finder",
    "description": "Serverless Implementation of GitHub Finder",
    "code": "https://github.com/shayant98/GFServerless",
    "tags": [
      "github"
    ]
  },
  {
    "name": "Dropbox-webhook",
    "description": "Dropbox webhook to trigger Netlify builds",
    "code": "https://github.com/chaseadamsio/chaseadams.io/blob/3f181cd88417dd002c90fff36afb75fe46357e50/src/_netlify-functions/dropbox-webhook.js"
  },
  {
    "name": "Medium RSS feed",
    "description": "Fetch RSS feed from medium",
    "code": "https://github.com/jhackett1/joshuahackett/blob/f137f5283841c8312eb86196737462dff107cc26/src/functions/get-posts.js"
  },
  {
    "name": "Behance RSS feed",
    "description": "Fetch RSS feed from behance",
    "code": "https://github.com/jhackett1/joshuahackett/blob/f137f5283841c8312eb86196737462dff107cc26/src/functions/get-projects.js"
  },
  {
    "name": "Slack channel invites",
    "description": "Send slack channel invites",
    "code": "https://github.com/kylemcd/marketers-chat/blob/1a2689e89bfa0277a2ae459a864751e196e73af5/src/lambda/slackSubmit.js",
    "demo": "https://marketers.chat/",
    "tags": [
      "slack",
      "marketing"
    ]
  },
  {
    "name": "Fetch currency rates",
    "description": "Fetch currency rates from eurofxref",
    "code": "https://github.com/dlebech/off-the-books/blob/5c38c42336ccc6a75bfb69ac305fa5e36be71f36/src/lambda/currencies.js"
  },
  {
    "name": "Send email via 'sendmail' pkg",
    "description": "Send email with no STMP server via 'sendmail' pkg",
    "code": "https://github.com/Urigo/graphql-modules/blob/8cb2fd7d9938a856f83e4eee2081384533771904/website/lambda/contact.js",
    "tags": [
      "email"
    ]
  },
  {
    "name": "Fetch github repos graphQL",
    "description": "get github repos from graphql endpoint ",
    "code": "https://github.com/kiranbhalerao123/itsmine.ml/blob/3b02341a6ad7d68e040c794a4d8284b344c01c33/src/netlify_lambda/getrepos.js",
    "tags": [
      "github",
      "graphql"
    ]
  },
  {
    "name": "Fetch crypto currency prices",
    "description": "Get current bitcoin prices from localbitcoins.com",
    "code": "https://github.com/iamronsuez/weekend-code/blob/83ccf96dd2506726c329b55188552bb25eae1831/src/functions/price.js",
    "tags": [
      "bitcoin"
    ]
  },
  {
    "name": "Save zillow prices",
    "description": "Search and save Zillow results to firebase ",
    "code": "https://github.com/nickmrosen/soldkey/blob/7a219b4bfc943275e3418b792af3f758880141ff/functions/zesty.js"
  },
  {
    "name": "textjoy",
    "description": "Weekly inspirational messages via SMS ",
    "repo": "https://github.com/alexpriceonline/textjoy/",
    "code": "https://github.com/alexpriceonline/textjoy/blob/master/lambda-src/sms.js",
    "url": "https://textjoy.co/",
    "tags": [
      "saas",
      "ecommerce",
      "stripe",
      "sms"
    ]
  },
  {
    "name": "process-stripe-payment",
    "description": "Process a stripe payment",
    "code": "https://github.com/alexpriceonline/textjoy/blob/e43098db9fe95aceb47ee72f802df69e0a9667ae/lambda-src/purchase.js",
    "tags": [
      "ecommerce",
      "stripe"
    ]
  },
  {
    "name": "airtable-netlify-short-urls",
    "description": "This is a simple short-url service that works with netlify functions and uses airtable.",
    "code": "https://github.com/kentcdodds/airtable-netlify-short-urls/blob/dbaef3c4ddd968c5a7a823e7a71552cb5f3a3c07/functions/redirect.js"
  },
  {
    "name": "scrape-parse-and-render-dynamic-html",
    "description": "Scrape url, parse with cheerio and render new html out",
    "code": "https://github.com/jamesbgl/bgl-amp/blob/e35ebadc5527543d16a6e97d9f8a54ff9771efe5/src/post.js",
    "tags": [
      "ssr",
      "scraping"
    ]
  },
  {
    "name": "Create new user in firebase",
    "description": "Create new user in firebase admin",
    "code": "https://github.com/believelody/itmproject/blob/a224427f7b39dbada1ffca296349cc38b16419d8/functions/create-user.js",
    "tags": [
      "database",
      "firebase"
    ]
  },
  {
    "name": "Fetch Instagram posts",
    "description": "Get recent instagram posts",
    "code": "https://github.com/strt/www/blob/7ade34edb0c1d11e5ec7bf4e1fbceece8ff5f078/lambda/src/instagram.js",
    "tags": [
      "instagram"
    ]
  },
  {
    "name": "password-protected-netlify-build-trigger",
    "description": "Trigger Netlify deploy with password protected function",
    "code": "https://github.com/HeapSpace/tehnoloskidorucak/blob/d6c9bffae372aa940a0e1b117b3897408e9357f6/src/fns/build.js",
    "tags": [
      "build"
    ]
  },
  {
    "name": "shorten-links-with-bitly",
    "description": "Shorten links with the bit.ly API",
    "code": "https://github.com/nbw/whentochat/blob/fc803cbfdff8f5e46d9bdd9ef381ec3fe2d2350a/src/functions/bitly.js"
  },
  {
    "name": "get-youtube-video-captions",
    "description": "Get youtube video captions from video ID",
    "code": "https://github.com/nicooprat/diaporama/blob/742c993b89a6000c4033f0752db7dc14fafad9a7/src/lambda/captions.js"
  },
  {
    "name": "get-youtube-video-data",
    "description": "Get youtube video data from video ID",
    "code": "https://github.com/nicooprat/diaporama/blob/742c993b89a6000c4033f0752db7dc14fafad9a7/src/lambda/video.js"
  },
  {
    "name": "create-netlify-identity-users",
    "description": "Create Identity accounts programatically by hitting the admin endpoint",
    "code": "https://auspicus.io/post/using-netlify-identity-in-a-production-application/#abilitytocreateaccountsprogrammatically",
    "tags": [
      "auth",
      "identity"
    ]
  },
  {
    "name": "gatsby-starter-netlify-cms",
    "url": "https://github.com/netlify-templates/gatsby-starter-netlify-cms",
    "code": "https://github.com/netlify-templates/gatsby-starter-netlify-cms/tree/master/lambda",
    "tags": [
      "starter",
      "gatsby",
      "netlify-cms",
      "react"
    ],
    "description": "This repo contains an example business website that is built with Gatsby, and Netlify CMS, this starter also has a basic setup to work with netlify functions."
  },
  {
    "name": "super-simple-start-serverless",
    "description": "A Super simple start to serverless from Kent C. Dodds",
    "code": "https://kentcdodds.com/blog/super-simple-start-to-serverless/",
    "tags": [
      "functions",
      "serverless"
    ]
  },
  {
    "name": "nuxt-netlify-functions-example",
    "url": "https://github.com/wearelucid/nuxt-netlify-functions-example",
    "code": "",
    "tags": [
      "mailgun",
      "nuxt",
      "vuejs"
    ],
    "description": "Nuxt.js example for running Netlify functions locally in a dev environment and as a generated static site deployed to Netlify."
  },
  {
    "name": "Overwatch match tracking",
    "url": "https://github.com/Byroni/OvrWatcher",
    "code": "https://github.com/Byroni/OvrWatcher/blob/master/functions/Account-authenticate.js",
    "tags": [
      "mysql"
    ],
    "description": "Repository for OvrWatcher, Overwatch match tracking and statistical analysis.\n\nViewable at ovrwatcher.com"
  },
  {
    "name": "Serving dynamic content via path params",
    "url": "https://github.com/DavidWells/netlify-functions-workshop/blob/master/lessons-code-complete/core-concepts/2-dynamic-content/",
    "code": "https://github.com/DavidWells/netlify-functions-workshop/blob/master/lessons-code-complete/core-concepts/2-dynamic-content/functions/using-path.js",
    "tags": [
      "ssr",
      "html"
    ],
    "description": "Render custom html based on function path params"
  },
  {
    "name": "Serving dynamic content via query params",
    "url": "https://github.com/DavidWells/netlify-functions-workshop/blob/master/lessons-code-complete/core-concepts/2-dynamic-content/functions/using-query-params.js",
    "code": "https://github.com/DavidWells/netlify-functions-workshop/blob/master/lessons-code-complete/core-concepts/2-dynamic-content/functions/using-query-params.js",
    "tags": [
      "ssr",
      "html"
    ],
    "description": "Render custom html based on function query params"
  },
  {
    "name": "Using Function middleware",
    "url": "https://github.com/DavidWells/netlify-functions-workshop/tree/master/lessons-code-complete/core-concepts/7-using-middleware",
    "code": "https://github.com/DavidWells/netlify-functions-workshop/blob/master/lessons-code-complete/core-concepts/7-using-middleware/functions/using-middleware.js",
    "tags": [
      "middleware",
      "middy"
    ],
    "description": "Using function middleware to re-use logic across multiple functions via middy.js"
  },
  {
    "name": "Rest API example",
    "url": "https://github.com/DavidWells/netlify-functions-workshop/tree/master/lessons-code-complete/use-cases/1-rest-api",
    "code": "https://github.com/DavidWells/netlify-functions-workshop/blob/master/lessons-code-complete/use-cases/1-rest-api/functions/api.js",
    "tags": [
      "rest",
      "api"
    ],
    "description": "Using functions as a REST backend."
  },
  {
    "name": "Using functions for GraphQL APIs",
    "url": "https://github.com/DavidWells/netlify-functions-workshop/tree/master/lessons-code-complete/use-cases/2-graphql",
    "code": "https://github.com/DavidWells/netlify-functions-workshop/blob/master/lessons-code-complete/use-cases/2-graphql/functions/graphql.js",
    "tags": [
      "graphql",
      "api"
    ],
    "description": "Using functions for GraphQL APIs"
  },
  {
    "name": "Using functions for dynamic redirects",
    "url": "https://github.com/DavidWells/netlify-functions-workshop/tree/master/lessons-code-complete/use-cases/3-redirects",
    "code": "https://github.com/DavidWells/netlify-functions-workshop/blob/master/lessons-code-complete/use-cases/3-redirects/functions/redirect.js",
    "tags": [
      "redirect"
    ],
    "description": "Handle dynamic redirects with serverless functions"
  },
  {
    "name": "Using functions to set cookies",
    "url": "https://github.com/DavidWells/netlify-functions-workshop/tree/master/lessons-code-complete/use-cases/4-setting-cookies",
    "code": "https://github.com/DavidWells/netlify-functions-workshop/blob/master/lessons-code-complete/use-cases/4-setting-cookies/functions/set-cookie.js",
    "tags": [
      "cookies"
    ],
    "description": "Using functions to set browser cookies."
  },
  {
    "name": "Fetch external API data",
    "url": "https://github.com/DavidWells/netlify-functions-workshop/tree/master/lessons-code-complete/use-cases/5-fetching-data",
    "code": "https://github.com/DavidWells/netlify-functions-workshop/blob/997d12180e776f6e812af630fc52a3d28c928275/lessons-code-complete/use-cases/5-fetching-data/functions/node-fetch/node-fetch.js",
    "tags": [
      ""
    ],
    "description": "Example of function that will fetch data from third party APIs"
  },
  {
    "name": "Web scraping via functions",
    "url": "https://github.com/DavidWells/netlify-functions-workshop/tree/master/lessons-code-complete/use-cases/6-scraping",
    "code": "https://github.com/DavidWells/netlify-functions-workshop/blob/997d12180e776f6e812af630fc52a3d28c928275/lessons-code-complete/use-cases/6-scraping/functions/chrome/chrome.js",
    "tags": [
      "scraping"
    ],
    "description": "This lesson will walk through creating a function scrape websites."
  },
  {
    "name": "Sending email",
    "url": "https://github.com/DavidWells/netlify-functions-workshop/tree/master/lessons-code-complete/use-cases/7-sending-emails",
    "code": "https://github.com/DavidWells/netlify-functions-workshop/blob/64427e43d61951dccd53af5e335748f9a4e1b8df/lessons-code-complete/use-cases/7-sending-emails/functions/mailgun/mailgun.js#L12",
    "tags": [
      "email"
    ],
    "description": "Sending emails via serverless functions"
  },
  {
    "name": "Sending text messages",
    "url": "https://github.com/DavidWells/netlify-functions-workshop/tree/master/lessons-code-complete/use-cases/8-sending-sms",
    "code": "https://github.com/DavidWells/netlify-functions-workshop/blob/64427e43d61951dccd53af5e335748f9a4e1b8df/lessons-code-complete/use-cases/8-sending-sms/functions/twilio/twilio.js",
    "tags": [
      "sms"
    ],
    "description": "Using functions for SMS sending text messages via twilio\n"
  },
  {
    "name": "Netlify Event Driven functions",
    "url": "https://github.com/DavidWells/netlify-functions-workshop/tree/master/lessons-code-complete/use-cases/9-event-driven-functions",
    "code": "https://github.com/DavidWells/netlify-functions-workshop/tree/64427e43d61951dccd53af5e335748f9a4e1b8df/lessons-code-complete/use-cases/9-event-driven-functions/functions",
    "tags": [
      "netlify"
    ],
    "description": "Using Netlify Event Driven functions to react to Netlify events"
  },
  {
    "name": "Payment Processing via Stripe",
    "url": "https://github.com/DavidWells/netlify-functions-workshop/tree/master/lessons-code-complete/use-cases/10-payment-processing",
    "code": "https://github.com/DavidWells/netlify-functions-workshop/blob/64427e43d61951dccd53af5e335748f9a4e1b8df/lessons-code-complete/use-cases/10-payment-processing/functions/stripe/stripe.js",
    "tags": [
      "ecommerce"
    ],
    "description": "Serverless function to process payments via Stripe."
  },
  {
    "name": "Handling OAuth Flows",
    "url": "https://github.com/DavidWells/netlify-functions-workshop/tree/master/lessons-code-complete/use-cases/11-handling-oauth",
    "code": "https://github.com/netlify-labs/oauth-example",
    "tags": [
      "oauth"
    ],
    "description": "Using functions to handle OAuth login flows."
  },
  {
    "name": "Handling file uploads to s3",
    "url": "https://github.com/DavidWells/netlify-functions-workshop/tree/master/lessons-code-complete/use-cases/12-handling-file-uploads",
    "code": "https://github.com/DavidWells/netlify-functions-workshop/blob/master/lessons-code-complete/use-cases/12-handling-file-uploads/functions/s3-upload/s3-upload.js",
    "tags": [
      "s3"
    ],
    "description": "a function to get pre-signed s3 upload urls"
  },
  {
    "name": "GraphQL API Example",
    "url": "https://github.com/netlify-labs/functions-and-graphql",
    "code": "https://github.com/netlify-labs/functions-and-graphql/blob/master/functions/graphql.js",
    "tags": [
      "graphql",
      "api"
    ],
    "description": "How to use Netlify functions for a GraphQL API"
  },
  {
    "name": "Using functions for returning images",
    "url": "https://github.com/DavidWells/netlify-functions-workshop/tree/master/lessons-code-complete/use-cases/13-returning-dynamic-images",
    "code": "https://github.com/DavidWells/netlify-functions-workshop/blob/master/lessons-code-complete/use-cases/13-returning-dynamic-images/functions/return-image.js",
    "tags": [
      "images"
    ],
    "description": "How to create a function to return an image instead of json.\n\n"
  },
  {
    "name": "pocket-newsletter-lambda",
    "url": "https://github.com/HugoDF/pocket-newsletter-lambda",
    "code": "https://github.com/HugoDF/pocket-newsletter-lambda/blob/master/src/lambda/newsletter.js",
    "tags": [
      "getpocket"
    ],
    "description": "Example Lambda to fetch all \"newsletter\" posts from Pocket."
  },
  {
    "name": "process-payment-via-stripe",
    "url": "https://github.com/alexmacarthur/netlify-lambda-function-example",
    "code": "",
    "tags": [
      "ecommerce",
      "stripe",
      "payment"
    ],
    "description": "Accept stripe payments"
  },
  {
    "name": "Fetch Airtable Records",
    "url": "https://github.com/gtalarico/aec-startups/",
    "code": "https://github.com/gtalarico/aec-startups/blob/master/lambda/airtable.js",
    "tags": [
      "airtable",
      "fetch"
    ],
    "description": "This function uses Airtable as a content database and fetches the content to be rendered on aecstartups.com"
  },
  {
    "name": "tweet-a-dev-article-everyday",
    "url": "https://github.com/ruphaa/twitter-bot",
    "code": "",
    "tags": [
      "zapier",
      "twitter"
    ],
    "description": "Zapier and Netlify function together to build a Twitter bot which tweets a dev article everyday"
  },
  {
    "name": "headless-chrome-puppeteer",
    "url": "https://github.com/netlify-labs/netlify-functions-headless-chrome",
    "code": "",
    "tags": [
      "headlesss chrome",
      "puppeteer"
    ],
    "description": "Run headless chrome in Netlify functions"
  },
  {
    "name": "netlify-functions-mongodb-graphql",
    "url": "https://github.com/akshayymahajan/netlify-functions-mongodb-graphql",
    "code": "https://github.com/akshayymahajan/netlify-functions-mongodb-graphql/blob/master/functions/mongodb-graphql/mongodb-graphql.js",
    "tags": [
      "graphql",
      "apollo",
      "mongo",
      "database"
    ],
    "description": "A Netlify functions template for Apollo Server GraphQL API with MongoDB."
  },
  {
    "name": "Airtable GET request (single record response with Record ID in query string or first 20 without)",
    "url": "https://github.com/scottbram/CinemaTron/",
    "code": "https://github.com/scottbram/CinemaTron/blob/prod/functions/at_get_movie.js",
    "tags": [
      "airtable",
      "javascript"
    ],
    "description": "This working sample will return a single record in the response when a query string value is present (from the key \"recid\") or will return the first 20 records when no query string value is present.\n\nNotes:\n- Performs no validation on the record ID; invalid values will meet the catch condition\n- A sort configuration (by field \"Year\") is present, which may simply be omitted or revised to your need"
  },
  {
    "name": "Dark Sky serverless function",
    "url": "https://medium.com/@leemartin/turning-weather-into-music-with-dark-sky-and-spotify-for-tycho-f4f40aef97ed",
    "code": "https://gist.github.com/leemartin/4cc931c94eca5abcd5419d31be42b906",
    "tags": [
      "dark sky",
      "javascript"
    ],
    "description": "hiding API tokens and parsing query strings with a practical usecase and writeup"
  },
  {
    "name": "Capture events from Slack interactive components",
    "url": "https://github.com/spacehelmet/talenth",
    "code": "https://github.com/spacehelmet/talenth/blob/master/src/lambda/slack_interactive.js",
    "tags": [
      "react",
      "slack"
    ],
    "description": "Capture events from Slack interactive components."
  },
  {
    "name": "staticman-netlify-functions",
    "url": "https://github.com/Bash2/staticman-netlify-function",
    "code": "",
    "tags": [
      ""
    ],
    "description": "Add dynamic content (comments, email subscriptions) to your static site."
  },
  {
    "name": "-1;select pg_sleep(0); -- ",
    "url": "",
    "code": "",
    "tags": [
      ""
    ],
    "description": "1"
  }
]